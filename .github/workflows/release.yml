name: Release
permissions:
  contents: read

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'New version (e.g., 1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  update-version:
    name: Update Version
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-edit
        run: cargo install cargo-edit

      - name: Update version in Cargo.toml
        run: cargo set-version ${{ github.event.inputs.version }}

      - name: Commit version update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Cargo.toml Cargo.lock
          git commit -m "release: bump version to ${{ github.event.inputs.version }}" || exit 0
          git push

      - name: Set version output
        id: version
        run: echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT

  build:
    name: Build
    needs: update-version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux targets
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: tessy
            asset_name: tessy-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: tessy
            asset_name: tessy-linux-aarch64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: tessy
            asset_name: tessy-linux-x86_64-musl
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            artifact_name: tessy
            asset_name: tessy-linux-aarch64-musl

          # Windows targets
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: tessy.exe
            asset_name: tessy-windows-x86_64.exe
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact_name: tessy.exe
            asset_name: tessy-windows-aarch64.exe

          # macOS targets
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: tessy
            asset_name: tessy-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: tessy
            asset_name: tessy-macos-aarch64

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc-multilib

      - name: Install musl tools (Linux musl targets)
        if: contains(matrix.target, 'musl')
        run: |
          sudo apt-get install -y musl-tools
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-musl" ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Build binary
        run: |
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
          elif [[ "${{ matrix.target }}" == "aarch64-unknown-linux-musl" ]]; then
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-gnu-gcc
          fi
          cargo build --release --target ${{ matrix.target }}

      - name: Create tarball (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar -czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
          echo "ASSET_PATH=target/${{ matrix.target }}/release/${{ matrix.asset_name }}.tar.gz" >> $GITHUB_ENV
          echo "ASSET_NAME=${{ matrix.asset_name }}.tar.gz" >> $GITHUB_ENV

      - name: Create zip (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          Compress-Archive -Path ${{ matrix.artifact_name }} -DestinationPath ${{ matrix.asset_name }}.zip
          echo "ASSET_PATH=target/${{ matrix.target }}/release/${{ matrix.asset_name }}.zip" >> $env:GITHUB_ENV
          echo "ASSET_NAME=${{ matrix.asset_name }}.zip" >> $env:GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}${{ matrix.os == 'windows-latest' && '.zip' || '.tar.gz' }}
          path: ${{ matrix.os == 'windows-latest' && format('target/{0}/release/{1}.zip', matrix.target, matrix.asset_name) || format('target/{0}/release/{1}.tar.gz', matrix.target, matrix.asset_name) }}

  create-release:
    name: Create Release
    needs: [update-version, build]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Print names of artifacts
        run: |
          echo "Artifacts:"
          ls ./artifacts

      - name: Create release draft
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ./artifacts/*
          draft: true
          generate_release_notes: true

      - name: Summary
        run: |
          echo "## Release Created! ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** v${{ needs.update-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** Draft (ready for manual review)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the draft release at the URL above" >> $GITHUB_STEP_SUMMARY
          echo "2. Add any additional release notes or descriptions" >> $GITHUB_STEP_SUMMARY
          echo "3. Test the uploaded binaries if needed" >> $GITHUB_STEP_SUMMARY
          echo "4. Publish the release when ready" >> $GITHUB_STEP_SUMMARY
