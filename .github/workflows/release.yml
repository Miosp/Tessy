name: Release
permissions:
  contents: read

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'New version (e.g., 1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  update-version:
    name: Update Version
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-edit
        run: cargo install cargo-edit

      - name: Update version in Cargo.toml
        run: cargo set-version ${{ github.event.inputs.version }}

      - name: Commit version update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Cargo.toml Cargo.lock
          git commit -m "release: bump version to ${{ github.event.inputs.version }}" || exit 0
          git push

      - name: Set version output
        id: version
        run: echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT

  build-windows:
    name: Build for Windows
    needs: update-version
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc,aarch64-pc-windows-msvc
      - name: Build x86_64 binary
        run:  |
          cargo build --release --target x86_64-pc-windows-msvc
      - name: Build aarch64 binary
        run:  |
          cargo build --release --target aarch64-pc-windows-msvc
      - name: Upload x86_64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: tessy-windows-x86_64.zip
          path: target\x86_64-pc-windows-msvc\release\tessy.exe
      - name: Upload aarch64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: tessy-windows-aarch64.zip
          path: target\aarch64-pc-windows-msvc\release\tessy.exe

  build-macos:
    name: Build for macOS
    needs: update-version
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin,aarch64-apple-darwin
      - name: Build x86_64 binary
        run:  |
          cargo build --release --target x86_64-apple-darwin
      - name: Build aarch64 binary
        run:  |
          cargo build --release --target aarch64-apple-darwin
      - name: Upload x86_64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: tessy-macos-x86_64.tar.gz
          path: target/x86_64-apple-darwin/release/tessy
      - name: Upload aarch64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: tessy-macos-aarch64.tar.gz
          path: target/aarch64-apple-darwin/release/tessy

  build-linux:
    name: Build for Linux
    needs: update-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu,aarch64-unknown-linux-gnu
      - name: Install cross-compilation toolchains
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
      - name: Configure cross-compilation
        run: |
          mkdir -p ~/.cargo
          cat >> ~/.cargo/config.toml << EOF
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          EOF
      - name: Build x86_64 binary
        run:  |
          cargo build --release --target x86_64-unknown-linux-gnu
      - name: Build aarch64 binary
        run:  |
          cargo build --release --target aarch64-unknown-linux-gnu
      - name: Upload x86_64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: tessy-linux-x86_64.tar.gz
          path: target/x86_64-unknown-linux-gnu/release/tessy
      - name: Upload aarch64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: tessy-linux-aarch64.tar.gz
          path: target/aarch64-unknown-linux-gnu/release/tessy

  create-release:
    name: Create Release
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Print names of artifacts
        run: |
          echo "Artifacts:"
          ls ./artifacts

      - name: Create release draft
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ./artifacts/*
          draft: true
          generate_release_notes: true

      - name: Summary
        run: |
          echo "## Release Created! ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** Draft (ready for manual review)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the draft release at the URL above" >> $GITHUB_STEP_SUMMARY
          echo "2. Add any additional release notes or descriptions" >> $GITHUB_STEP_SUMMARY
          echo "3. Test the uploaded binaries if needed" >> $GITHUB_STEP_SUMMARY
          echo "4. Publish the release when ready" >> $GITHUB_STEP_SUMMARY
